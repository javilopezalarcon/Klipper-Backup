#[include ./Demon_Klipper_Essentials_Unified/Other_Files/Demon_User_Files_Updater/Extract_Demon_User_Files_Rpi.cfg]
# Incluimos las macros oficiales de mainsail
[include mainsail.cfg]

# Incluimos las macros del paquete KAMP_LiTE
[include ./KAMP_LiTE/*.cfg]

##Incluimos las macros de Demon Klippper Essentials Unified
[include ./Demon_Klipper_Essentials_Unified/*.cfg]

# Incluimos las variables de Demon Klipper
[include Demon_Klipper_Essentials_Unified/Other_Files/DEMON_User_Files_SOURCE/*.cfg]

# Incluimos la redefinicion de las variables
[include variables.cfg]


###############################
######## Personales ###########
###############################

### PUBLISH ALERT MQTT
[gcode_macro PUBLISH_ALERT]
 gcode:
   {% set data = params.PAYLOAD|default(None) %}
   {action_call_remote_method("publish_mqtt_topic",
                              topic="klipper/alert",
                              payload=data,
                              qos=0,
                              retain=False,
                              use_prefix=False)}

### M300
[gcode_macro M300]
gcode:
    {% set P = params.P|default(100)|float %}
    SET_PIN PIN=beeper VALUE=1
    G4 P{P}
    SET_PIN PIN=beeper VALUE=0

### BEEP
[gcode_macro BEEP]
description: Emite un pitido.\n Uso BEEP [R=NUMERO DE PITIDOS]
gcode:
    {% if 'output_pin beeper' in printer.configfile.settings and printer["gcode_macro M300"] is defined %}
        {% set R = params.R|default(1)|int %}
        {% for i in range(R) %}
            M300 P200
            #M300
            G4 P100
        {% endfor %}
    {% endif %}

### TOTAL SHUTDOWN
# Usage: TOTAL_SHUTDOWN
[gcode_macro TOTAL_SHUTDOWN]
description: Shutdown the Raspberry Pi in a controlled way and then the 3D printer
gcode:
  PUBLISH_ALERT PAYLOAD="TotalShutdown"


################################
####### Sobreescritas ##########
################################

### _FIL_CHANGE_PARK

[gcode_macro _FIL_CHANGE_PARK]
gcode: 
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  SET_DISPLAY_TEXT MSG="Moving to filament change position, use load/unload macros when ready!"
  RESPOND TYPE=COMMAND MSG="Moving to filament change position, use load/unload macros when ready!"
  PAUSE X={start_vars.filament_change_park_x} Y={start_vars.filament_change_park_y} Z_MIN={start_vars.filament_change_park_min_z} RESTORE=0
  _SAVE
  UNLOAD_FILAMENT

### INITIAL SETUP 

[gcode_macro _INITIAL_SETUP]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  M220 S{start_vars.feed_rate}
  RESPOND TYPE=COMMAND MSG="_INITIAL_SETUP: Ignoring flow rate and pa from Demon to get slicer values"
  

### LOAD FILAMENT 

[gcode_macro LOAD_FILAMENT]
gcode:
  {% set clean_vars = printer["gcode_macro _CLEAN_VARIABLES"] %}
  {% set speed = params.SPEED_MMsec|default(7)|float * 60 %}
  {% set temp = params.TEMP|default(200)|int %}
  {% set cool = params.COOL|default('No')|string %}
  {% set cool_temp = params.COOL_TEMP|default(160)|int %}
  {% if printer.print_stats.state in ['printing', 'paused'] or clean_vars.have_you_set_this_up != True %}
    SET_DISPLAY_TEXT MSG="Vamos a Realizar una carga normal"
    RESPOND TYPE=COMMAND MSG="Vamos a Realizar una carga normal"
    _LOAD_FILAMENT SPEED_MMsec={speed} TEMP={temp} COOL={cool} COOL_TEMP={cool_temp}
  {% else %}
    SET_DISPLAY_TEXT MSG="Vamos a Realizar una carga con limpieza"
    RESPOND TYPE=COMMAND MSG="Vamos a Realizar una carga con limpieza"
    LOAD_CLEAN SPEED_MMsec={speed} TEMP={temp}
  {% endif %} 

### UNLOAD FILAMENT 

[gcode_macro UNLOAD_FILAMENT]
gcode:
  {% set clean_vars = printer["gcode_macro _CLEAN_VARIABLES"] %}
  {% set speed = params.SPEED_MMsec|default(7)|float * 60 %}
  {% set temp = params.TEMP|default(200)|int %}
  {% set cool = params.COOL|default('No')|string %}
  {% set cool_temp = params.COOL_TEMP|default(160)|int %}
  {% if printer.print_stats.state in ['printing', 'paused'] or clean_vars.have_you_set_this_up != True %}
    SET_DISPLAY_TEXT MSG="Vamos a Realizar una descarga normal"
    RESPOND TYPE=COMMAND MSG="Vamos a Realizar una descarga normal"
    _UNLOAD_FILAMENT SPEED_MMsec={speed} TEMP={temp} COOL={cool} COOL_TEMP={cool_temp}
  {% else %}
    SET_DISPLAY_TEXT MSG="Vamos a Realizar una descarga con limpieza"
    RESPOND TYPE=COMMAND MSG="Vamos a Realizar una descarga con limpieza"
    UNLOAD_CLEAN SPEED_MMsec={speed} TEMP={temp}
  {% endif %} 

### _LOAD_FILAMENT 
    
[gcode_macro _LOAD_FILAMENT]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}
  {% set ceal = printer["gcode_macro CUSTOM_EXPANSION_ACTIVE_LIST"] %}
  {% set speed = params.SPEED_MMsec|default(7)|float * 60 %}
  {% set temp = params.TEMP|default(250)|int %}
  {% set cool = params.COOL|default('No')|string %}
  {% set cool_temp = params.COOL_TEMP|default(160)|int %}
  {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity * 60 %}

    _MAX_EXTRUDE_CHECK
    
    SAVE_GCODE_STATE NAME=load_state

    _ENCODER_FEED_CHECK_PREP
    M400
    
  {% if ceal.ceal_master_enable == True %}
    {% if ceal.pre_load == True %}
      _CUSTOM_PRE_LOAD {rawparams}
    {% endif %}
  {% endif %}

  {% if printer.print_stats.state not in ['printing', 'paused'] %} #and (printer.extruder.target <= printer.configfile.settings['extruder'].min_extrude_temp) %}
    {% if "xyz" not in printer.toolhead.homed_axes %}
      {% if core_vars.last_known_z|float < 50|float %}
        Z_ASCENDER HEIGHT={(50 - core_vars.last_known_z|float)}
      {% endif %}

    {% else %}
      {% if printer.toolhead.position.z|float < start_vars.filament_change_park_min_z|float %}
        G90
        G0 Z{start_vars.filament_change_park_min_z} F3600
      {% endif %}
      G0 X{start_vars.filament_change_park_x} Y{start_vars.filament_change_park_y} F9000
    {% endif %}
    
    SET_DISPLAY_TEXT MSG="Load hotend heating..."
    RESPOND TYPE=COMMAND MSG="Load hotend heating..."
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp} 
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp|int -2} MAXIMUM={temp|int + 5}
    M117
  {% endif %}
     
    M83
    G92 E0
    G1 E{start_vars.load_length} F{max_velocity}
    M400
    _ENCODER_FEED_CHECK
      
    G1 E{start_vars.load_purge_length} F{speed}

  # {% if cool in ['Yes', 'yes', 'True', 'true']|string %}
  {% if cool|lower in ['yes', 'true'] %}
    {% if printer.print_stats.state not in ['printing', 'paused'] and (temp >= printer.configfile.settings['extruder'].min_extrude_temp) %}
      SET_DISPLAY_TEXT MSG="Post load hotend cooling..."
      RESPOND TYPE=COMMAND MSG="Post load hotend cooling..."
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={cool_temp} 
      # {% if printer.extruder.target >= 50|int %}
      #   TEMPERATURE_WAIT SENSOR=extruder MINIMUM={cool_temp|int -2} MAXIMUM={cool_temp|int + 5}
      # {% endif %}
      M117

    {% elif printer.print_stats.state in ['printing', 'paused'] %}
      SET_DISPLAY_TEXT MSG="Load cooling denied, print in progress!"
      RESPOND TYPE=COMMAND MSG="Load cooling denied, print in progress!"
    {% endif %} 
  {% endif %}

  {% if ceal.ceal_master_enable == True %}
    {% if ceal.post_load == True %}
       _CUSTOM_POST_LOAD {rawparams}
    {% endif %}
  {% endif %}
  
    RESTORE_GCODE_STATE NAME=load_state
  {% if "xyz" in printer.toolhead.homed_axes %}
    _SAVE
  {% endif %}

### _UNLOAD_FILAMENT 

[gcode_macro _UNLOAD_FILAMENT]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set core_vars = printer["gcode_macro _CORE_VARS"] %}
  {% set ceal = printer["gcode_macro CUSTOM_EXPANSION_ACTIVE_LIST"] %}
  {% set speed = params.SPEED_MMsec|default(7)|float * 60 %}
  {% set temp = params.TEMP|default(250)|int %}
  {% set cool = params.COOL|default('No')|string %}
  {% set cool_temp = params.COOL_TEMP|default(160)|int %}
  {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity * 60 %}

    _MAX_EXTRUDE_CHECK
    
    SAVE_GCODE_STATE NAME=unload_state

    _ENCODER_FEED_CHECK_PREP
    M400
    
  {% if ceal.ceal_master_enable == True %}
    {% if ceal.pre_unload == True %}
      _CUSTOM_PRE_UNLOAD {rawparams}
    {% endif %}
  {% endif %}

  {% if printer.print_stats.state not in ['printing', 'paused'] %} #and (printer.extruder.target <= printer.configfile.settings['extruder'].min_extrude_temp) %}
    {% if "xyz" not in printer.toolhead.homed_axes %}
      {% if core_vars.last_known_z|float < 50|float %}
        Z_ASCENDER HEIGHT={(50 - core_vars.last_known_z|float)}
      {% endif %}

    {% else %}
      {% if printer.toolhead.position.z|float < start_vars.filament_change_park_min_z|float %}
        G90
        G0 Z{start_vars.filament_change_park_min_z} F3600
      {% endif %}
      G0 X{start_vars.filament_change_park_x} Y{start_vars.filament_change_park_y} F9000
    {% endif %}
  
    SET_DISPLAY_TEXT MSG="Unload hotend heating..."
    RESPOND TYPE=COMMAND MSG="Unload hotend heating..."
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp} 
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp|int -2} MAXIMUM={temp|int + 5}
    M117
  {% endif %}

    M83
    G92 E0
    G1 E{start_vars.unload_purge_length} F{speed}
    M400
    _ENCODER_FEED_CHECK
    G1 E-5 F{max_velocity}
    G4 P8000
    
    G1 E-{start_vars.unload_length} F{max_velocity}

  {% if cool|lower in ['yes', 'true'] %}
    {% if printer.print_stats.state not in ['printing', 'paused'] and (temp >= printer.configfile.settings['extruder'].min_extrude_temp) %}
      SET_DISPLAY_TEXT MSG="Post unload hotend cooling..."
      RESPOND TYPE=COMMAND MSG="Post unload hotend cooling..."
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={cool_temp} 
      # {% if printer.extruder.target >= 50|int %}
      #   TEMPERATURE_WAIT SENSOR=extruder MINIMUM={cool_temp|int -2} MAXIMUM={cool_temp|int + 5}
      # {% endif %}
      M117

    {% elif printer.print_stats.state in ['printing', 'paused'] %}
      SET_DISPLAY_TEXT MSG="Unload cooling denied, print in progress!"
      RESPOND TYPE=COMMAND MSG="Unload cooling denied, print in progress!"
    {% endif %} 
  {% endif %}

  {% if ceal.ceal_master_enable == True %}
    {% if ceal.post_unload == True %}
      _CUSTOM_POST_UNLOAD {rawparams}
    {% endif %}
  {% endif %}
    
    RESTORE_GCODE_STATE NAME=unload_state
  {% if "xyz" in printer.toolhead.homed_axes %}
    _SAVE
  {% endif %}


### CUSTOM EXPANSION ACTIVE LIST 

[gcode_macro _CUSTOM_PRE_LOAD]
gcode:
  BEEP R=1

[gcode_macro _CUSTOM_PRE_LOAD_CLEAN]
gcode:
  BEEP R=1

[gcode_macro _CUSTOM_PRE_PID_Tune_Mode]
gcode:
  BEEP R=1

[gcode_macro _CUSTOM_PRE_UNLOAD]
gcode:
  BEEP R=1

[gcode_macro _CUSTOM_PRE_UNLOAD_CLEAN]
gcode:
  BEEP R=1

[gcode_macro _CUSTOM_POST_LOAD] # After filament LOAD macro runs
gcode:
  SET_DISPLAY_TEXT MSG="Filamento Cargado"
  RESPOND TYPE=COMMAND MSG="Filamento Cargado"
  BEEP R=2

[gcode_macro _CUSTOM_POST_UNLOAD] # After filament UNLOAD macro runs
gcode:
  SET_DISPLAY_TEXT MSG="Filamento Descargado"
  RESPOND TYPE=COMMAND MSG="Filamento Descargado"
  BEEP R=2

[gcode_macro _CUSTOM_POST_LOAD_CLEAN] # After filament LOAD_CLEAN macro runs
gcode:
  SET_DISPLAY_TEXT MSG="Filamento Cargado"
  RESPOND TYPE=COMMAND MSG="Filamento Cargado"
  BEEP R=2

[gcode_macro _CUSTOM_POST_UNLOAD_CLEAN] # After filament UNLOAD_CLEAN macro runs
gcode:
  SET_DISPLAY_TEXT MSG="Filamento Descargado"
  RESPOND TYPE=COMMAND MSG="Filamento Descargado"
  BEEP R=2

[gcode_macro _CUSTOM_POST_PID_Tune_Mode]
gcode:
  PUBLISH_ALERT PAYLOAD="PidFinished"
  BEEP R=2
